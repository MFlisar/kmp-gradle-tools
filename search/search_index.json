{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"Example Library"},{"location":"#features","title":"Features","text":"<p>This library has following features:</p> <ul> <li>Feature 1</li> <li>Feature 2</li> <li>Feature 3</li> <li>...</li> </ul>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module ANDROID IOS WINDOWS MACOS WASM Info Core <code>{{ no such element: dict object['name'] }}</code>                    -                                     -                                     -                                     -                                     -                                 {{ no such element: dict object['platforms-info'] }}              Extensions <code>{{ no such element: dict object['name'] }}</code>                    -                                     -                                     -                                     -                                     -                                 {{ no such element: dict object['platforms-info'] }}              <ul> <li>(1) custom platform comment 1</li> </ul>"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Compose Multiplatform <code>1.8.1</code> Uses jetpack compose <code>1.8.1</code> and material3 <code>1.3.2</code> <p>More details about the jetpack dependencies can be found in JetBrains Release Notes.</p>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>{{ no such element: dict object['name'] }}</code> Yaml... <code>0.80.1</code> Extensions <code>{{ no such element: dict object['name'] }}</code> Yaml... <code>0.80.1</code>"},{"location":"me/","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. Compose Image Library Description ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeColors A simple collection of colors that can be used inside any KMP compose project. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer. ComposeDialogs A compose framework for modal dialogs. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences. ComposeThemer This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app."},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val example library = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.example:{{ no such element: dict object['name'] }}:$example library\")\n\n// some useful extensions\nimplementation(\"io.github.mflisar.example:{{ no such element: dict object['name'] }}:$example library\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\nexample library = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\nexample library-{{ no such element: dict object['name'] }} = { module = \"io.github.mflisar.example:{{ no such element: dict object['name'] }}\", version.ref = \"example library\" }\n\n# some useful extensions\nexample library-{{ no such element: dict object['name'] }} = { module = \"io.github.mflisar.example:{{ no such element: dict object['name'] }}\", version.ref = \"example library\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.example library.{{ no such element: dict object['name'] }})\n\n# some useful extensions\nimplementation(libs.example library.{{ no such element: dict object['name'] }})\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>TODO</p>"},{"location":"migration/v0.7/","title":"v0.7","text":"<p>Info</p> <p>Version <code>2.0</code> is a kotlin multiplatform rewrite, that's why some fundamantal changes needed to be done!</p> <p>Overall some things have become extension functions to provide target specific implementations. Platform specific functions and overloads have been added to provide a good single platform experience and some typos have been fixed as well.</p> <p>Following is an overview on what has changed and shows how you can migrate your project.</p>"},{"location":"migration/v0.7/#datastorestorage","title":"DataStoreStorage","text":"<p>I do provide platform specific <code>create</code> function to make single platform usage easier. On android those do look like following now:</p> <pre><code>val storage = DataStoreStorage.create(name = \"...\")\n</code></pre> <p>In MP projects you can simply use the classes themself if you want to.</p> <p>Additionally the class was moved  from <code>import com.michaelflisar.kotpreferences.datastore.DataStoreStorage</code> to <code>com.michaelflisar.kotpreferences.storage.datastore.DataStoreStorage</code>.</p>"},{"location":"migration/v0.7/#enumpref","title":"enumPref","text":"<p>The <code>enumPref</code> function that does not need an array of all enum values became an extension function and only exists on android (because the <code>Enum.entries</code> field does not exist on all platforms).</p> <p>You need to import <code>import com.michaelflisar.kotpreferences.core.enumPref</code> on android now to keep using this function.</p>"},{"location":"modules/compose/","title":"compose","text":"<p>This module is placed inside the <code>extension-compose</code> artifact and offers some helpful compose extensions for the <code>Storage</code> class.</p>"},{"location":"modules/compose/#collectasstate-functions","title":"<code>collectAsState*</code> functions","text":""},{"location":"modules/compose/#collectasstatenotnull","title":"<code>collectAsStateNotNull</code>","text":""},{"location":"modules/compose/#asmutablestate-functions","title":"<code>asMutableState*</code> functions","text":""},{"location":"modules/compose/#asstateflow-functions","title":"<code>asStateFlow*</code> functions","text":""},{"location":"modules/datastore/","title":"datastore","text":"<p>The <code>Storage</code> is an abstraction to support any storage implementation. The <code>storage-datastore</code> module provides an implementation based on the Android JetPack DataStore.</p> <p>This module is placed inside the <code>storage-datastore</code> artifact and can simply be used like following:</p> Android/iOSJVM <pre><code>object SettingsModel : SettingsModel(\n    DataStoreStorage.create(\n        name: String = \"settings\",\n        encryption: StorageEncryption? = null,\n        cache: Boolean = true\n    )\n) {\n    // ...\n}\n</code></pre> <pre><code>object SettingsModel : SettingsModel(\n    DataStoreStorage.create(\n        folder: File,\n        name: String = \"settings\",\n        encryption: StorageEncryption? = null,\n        cache: Boolean = true\n    )\n) {\n    // ...\n}\n</code></pre>"},{"location":"modules/encryption/","title":"encryption","text":"<p>Note</p> <p>This extension does only support android!</p> <p>Currently there only exists the AES encryption module. It simple implements a predefined interface that encrypts and decrypts all data before it get's persisted by a storage implementation.</p> <p>This module is placed inside the <code>encrpytion-aes</code> artifact and can simply be used like following:</p>"},{"location":"modules/encryption/#step-12-define-the-encryption","title":"Step 1/2: define the encryption","text":"<pre><code>private const val ALGORITHM = StorageEncryptionAES.DEFAULT_ALGORITHM\nprivate const val KEY_ALGORITHM = StorageEncryptionAES.DEFAULT_KEY_ALGORITHM\n// also check out StorageEncryptionAES::generateKey and StorageEncryptionAES::generateIv if you need some helper functions\nprivate val KEY = StorageEncryptionAES.getKeyFromPassword(KEY_ALGORITHM, \"my key\", \"my salt\")\nprivate val BYTE_ARRAY = listOf(0x16, 0x09, 0xc0, 0x4d, 0x4a, 0x09, 0xd2, 0x46, 0x71, 0xcc, 0x32, 0xb7, 0xd2, 0x91, 0x8a, 0x9c)\n    .map { it.toByte() }\n    .toByteArray()\nprivate val IV = StorageEncryptionAES.getIv(BYTE_ARRAY) // byte array must be 16 bytes!\nval ENCRYPTION = StorageEncryptionAES(ALGORITHM, KEY, IV)\n</code></pre>"},{"location":"modules/encryption/#step-22-attach-the-encryption-to-your-storage-instance","title":"Step 2/2: attach the encryption to your storage instance","text":"<pre><code>object MyEncryptedSettingsModel : SettingsModel(\n    DataStoreStorage(\n        name = \"encrypted\",\n        encryption = ENCRYPTION\n    )\n) {\n    // ...\n}\n</code></pre>"},{"location":"modules/key-value/","title":"key-value","text":"<p>The <code>Storage</code> is an abstraction to support any storage implementation. The <code>storage-keyvalue</code> module provides an implementation based on a plain text file that will look like following:</p> <pre><code>key1=value1\nkey2=value2\n</code></pre> <p>This module is placed inside the <code>storage-keyvalue</code> artifact and can simply be used like following:</p> Android/iOSJVM <pre><code>object SettingsModel : SettingsModel(\n    KeyValueStorage.create(\n        fileName: String = \"settings.txt\",\n        delimiter: String = \"=\",\n        encryption: StorageEncryption? = null,\n        cache: Boolean = true\n    )\n) {\n    // ...\n}\n</code></pre> <pre><code>object SettingsModel : SettingsModel(\n    KeyValueStorage.create(\n        folder = File(System.getProperty(\"user.dir\")),\n        fileName = \"data.txt\",\n        delimiter: String = \"=\",\n        encryption: StorageEncryption? = null,\n        cache: Boolean = true\n    )\n) {\n    // ...\n}\n</code></pre>"}]}